// This is an autogenerated optimized .PIE file using sources/standard/src/main/java/com/ontotext/trree/PartialOwlHorstHashInferencer.java as a base!

Prefices
{
	rdf : http://www.w3.org/1999/02/22-rdf-syntax-ns#
	rdfs : http://www.w3.org/2000/01/rdf-schema#
	owl : http://www.w3.org/2002/07/owl#
	onto : http://www.ontotext.com/
	xsd : http://www.w3.org/2001/XMLSchema#
	psys : http://proton.semanticweb.org/protonsys#
	pext : http://proton.semanticweb.org/protonext#
}

Axioms
{
	<rdf:type> <rdf:type> <rdf:Property>
	<rdf:subject> <rdf:type> <rdf:Property>
	<rdf:predicate> <rdf:type> <rdf:Property>
	<rdf:object> <rdf:type> <rdf:Property>
	<rdf:first> <rdf:type> <rdf:Property>
	<rdf:rest> <rdf:type> <rdf:Property>
	<rdf:value> <rdf:type> <rdf:Property>
	<rdf:nil> <rdf:type> <rdf:List>
	<rdfs:subClassOf> <rdfs:domain> <rdfs:Class>
	<rdf:subject> <rdfs:domain> <rdf:Statement>
	<rdf:predicate> <rdfs:domain> <rdf:Statement>
	<rdf:object> <rdfs:domain> <rdf:Statement>
	<rdf:first> <rdfs:domain> <rdf:List>
	<rdf:rest> <rdfs:domain> <rdf:List>
	<rdfs:domain> <rdfs:range> <rdfs:Class>
	<rdfs:range> <rdfs:range> <rdfs:Class>
	<rdfs:subClassOf> <rdfs:range> <rdfs:Class>
	<rdf:rest> <rdfs:range> <rdf:List>
	<rdfs:comment> <rdfs:range> <rdfs:Literal>
	<rdfs:label> <rdfs:range> <rdfs:Literal>
	<rdf:Alt> <rdfs:subClassOf> <rdfs:Container>
	<rdf:Bag> <rdfs:subClassOf> <rdfs:Container>
	<rdf:Seq> <rdfs:subClassOf> <rdfs:Container>
	<rdfs:ContainerMembershipProperty> <rdfs:subClassOf> <rdf:Property>
	<rdfs:isDefinedBy> <rdfs:subPropertyOf> <rdfs:seeAlso>
	<rdf:XMLLiteral> <rdf:type> <rdfs:Datatype>
	<rdf:XMLLiteral> <rdfs:subClassOf> <rdfs:Literal>
	<rdfs:Datatype> <rdfs:subClassOf> <rdfs:Class>
	<owl:equivalentClass> <rdf:type> <owl:TransitiveProperty>
	<owl:equivalentClass> <rdf:type> <owl:SymmetricProperty>
	<owl:equivalentClass> <rdfs:subPropertyOf> <rdfs:subClassOf>
	<owl:equivalentProperty> <rdf:type> <owl:TransitiveProperty>
	<owl:equivalentProperty> <rdf:type> <owl:SymmetricProperty>
	<owl:equivalentProperty> <rdfs:subPropertyOf> <rdfs:subPropertyOf>
	<owl:inverseOf> <rdf:type> <owl:SymmetricProperty>
	<rdfs:subClassOf> <rdf:type> <owl:TransitiveProperty>
	<rdfs:subPropertyOf> <rdf:type> <owl:TransitiveProperty>
	<rdf:type> <psys:transitiveOver> <rdfs:subClassOf>
	<owl:differentFrom> <rdf:type> <owl:SymmetricProperty>
	<xsd:nonNegativeInteger> <rdf:type> <rdfs:Datatype>
	<xsd:string> <rdf:type> <rdfs:Datatype>
	<rdf:_1> <rdf:type> <rdf:Property>
	<rdf:_1> <rdf:type> <rdfs:ContainerMembershipProperty>

	<rdf:_1> <rdfs:domain> <rdfs:Resource>
    <rdf:_1> <rdfs:range> <rdfs:Resource>

    // Some axioms needed for owl property chains

    <owl:ObjectProperty> <rdf:type> <rdfs:Class>
    <owl:ObjectProperty> <rdfs:subClassOf> <rdf:Property>
    <rdf:Property> <rdfs:subClassOf> <owl:ObjectProperty>
    <owl:SymmetricProperty> <rdfs:subClassOf> <owl:ObjectProperty>
    <owl:TransitiveProperty> <rdfs:subClassOf> <owl:ObjectProperty>
    <owl:inverseOf> <rdfs:domain> <owl:ObjectProperty>
    <owl:inverseOf> <rdfs:range> <owl:ObjectProperty>


    <owl:propertyChainAxiom> <rdf:type> <rdf:Property>
    <owl:propertyChainAxiom> <rdfs:domain> <owl:ObjectProperty>
    <owl:propertyChainAxiom> <rdfs:range> <rdf:List>
}

Rules
{

	Id: rdfs2

	  a b c [Constraint b != <rdf:type>]
	  b <rdfs:domain> d
	------------------------------------
	  a <rdf:type> d


	Id: rdfs3

	  a b c
	  b <rdfs:range> d
	------------------------------------
	  c <rdf:type> d


	Id: rdfs6

	  a <rdf:type> <rdf:Property>
	------------------------------------
	  a <rdfs:subPropertyOf> a


	Id: rdfs7

	  a b c
	  b <rdfs:subPropertyOf> d [Constraint b != d]
	------------------------------------
	  a d c


	Id: rdfs8_10

	  a <rdf:type> <rdfs:Class>
	------------------------------------
	  a <rdfs:subClassOf> a


	Id: rdfs12

	  a <rdf:type> <rdfs:ContainerMembershipProperty>
	------------------------------------
	  a <rdfs:subPropertyOf> <rdfs:member>


	Id: rdfs13

	  a <rdf:type> <rdfs:Datatype>
	------------------------------------
	  a <rdfs:subClassOf> <rdfs:Literal>


	Id: proton_TransitiveOver

	  a <psys:transitiveOver> b
	  c a d
	  d b e
	------------------------------------
	  c a e


	Id: proton_TransProp

	  a <rdf:type> <owl:TransitiveProperty>
	------------------------------------
	  a <psys:transitiveOver> a


	Id: proton_TransPropInduct

	  a <psys:transitiveOver> a
	------------------------------------
	  a <rdf:type> <owl:TransitiveProperty>


	Id: Proton_roleHolder

	  a <pext:roleHolder> b
	  b <rdf:type> <pext:Agent>
	  a <pext:roleIn> c
	------------------------------------
	  b <pext:involvedIn> c


	Id: owl_invOf

	  a b c
	  b <owl:inverseOf> d
	------------------------------------
	  c d a


	Id: owl_invOfBySymProp

	  a <rdf:type> <owl:SymmetricProperty>
	------------------------------------
	  a <owl:inverseOf> a


	Id: owl_SymPropByInverse

	  a <owl:inverseOf> a
	------------------------------------
	  a <rdf:type> <owl:SymmetricProperty>


	Id: owl_FunctProp

	  a <rdf:type> <owl:FunctionalProperty> [Constraint a != <rdf:type>]
	  b a c
	  b a d [Constraint c != d, d != c] [Cut]
	------------------------------------
	  c <owl:sameAs> d


	Id: owl_InvFunctProp

	  a <rdf:type> <owl:InverseFunctionalProperty> [Constraint a != <rdf:type>]
	  b a c
	  d a c [Constraint b != d, d != b] [Cut]
	------------------------------------
	  b <owl:sameAs> d


	Id: owl_EquivClassBySubClass

	  a <rdfs:subClassOf> b [Constraint b != a]
	  b <rdfs:subClassOf> a [Cut]
	------------------------------------
	  a <owl:equivalentClass> b


	Id: owl_EquivPropBySubProp

	  a <rdfs:subPropertyOf> b [Constraint b != a]
	  b <rdfs:subPropertyOf> a [Cut]
	------------------------------------
	  a <owl:equivalentProperty> b


	Id: owl_typeByAllVal

	  a <owl:onProperty> b
	  c <rdf:type> a
	  a <owl:allValuesFrom> d
	  c b e
	------------------------------------
	  e <rdf:type> d


	Id: owl_typeByHasVal

	  a <owl:onProperty> b
	  a <owl:hasValue> c
	  d b c
	------------------------------------
	  d <rdf:type> a


	Id: owl_AttrByHasVal

	  a <owl:hasValue> b
	  a <owl:onProperty> c
	  d <rdf:type> a
	------------------------------------
	  d c b


	Id: owl_typeBySomeVal

	  a <rdf:type> b
	  c <owl:onProperty> d
	  c <owl:someValuesFrom> b
	  e d a
	------------------------------------
	  e <rdf:type> c


	Id: owl_subclassByIntersect1

	  a <owl:intersectionOf> b
	------------------------------------
	  a <onto:_interOf> b


	Id: owl_subclassByIntersect2

	  a <onto:_interOf> b
	  b <rdf:first> c
	  b <rdf:rest> d
	------------------------------------
	  a <rdfs:subClassOf> c
	  a <onto:_interOf> d


	Id: owl_typeByIntersect_1

	  a <onto:_allTypes> b
	  c <owl:intersectionOf> b
	------------------------------------
	  a <rdf:type> c


	Id: owl_typeByIntersect_2

	  a <rdf:first> b
	  a <rdf:rest> <rdf:nil>
	  c <rdf:type> b
	------------------------------------
	  c <onto:_allTypes> a


	Id: owl_typeByIntersect_3

	  a <rdf:first> b
	  d <rdf:type> b
	  a <rdf:rest> c
	  d <onto:_allTypes> c
	------------------------------------
	  d <onto:_allTypes> a


//=================================================================================
// Add your property-chain rules here
//=================================================================================


	
Id: prp_spo1
    p1 <rdfs:subPropertyOf> p2
    x p1 y
    -------------------------------
    x p2 y

Id: prp_spo2_1
    p <owl:propertyChainAxiom> pc
    //_checkChain(?start ?pc ?last)
    b <onto:_checkChain1> start
    b <onto:_checkChain2> pc
    b <onto:_checkChain3> last
    ----------------------------
    start p last
        
Id: prp_spo2_2
    pc <rdf:first> p
    pc <rdf:rest> t                 [Constraint t != <rdf:nil>]
    start p next
//    _checkChain(next t last)
    b1 <onto:_checkChain1> next
    b1 <onto:_checkChain2> t
    b1 <onto:_checkChain3> last
    ----------------------------
//    _checkChain(start pc last)
    b2 <onto:_checkChain1> start
    b2 <onto:_checkChain2> pc
    b2 <onto:_checkChain3> last

Id: prp_spo2_3
    pc <rdf:first> p
    pc <rdf:rest> <rdf:nil>
    start p last
    ----------------------------
    //_checkChain( start pc last)
    b <onto:_checkChain1> start
    b <onto:_checkChain2> pc
    b <onto:_checkChain3> last 

}
